#!/bin/bash

root_dir="/home/myaccount/problem-repos"
repo_dir="problem-dir"
task=$1
contest_id=0
task_path="${root_dir}/${repo_dir}/${task}"
nogen=0

is_problem () {
    name=$1

    case ${name} in
        "Hello_CMS" | "Template") # Sample problems
            return 1
            ;;
        "scripts" | "statementbox" | "tps_scripts") # Non-problem directories
            return 1
            ;;
        *)
            return 0
            ;;
    esac
}

help_func () {
    echo "Usage: ./updateTask.sh <task-name> [options]"
    echo "Update a tps-format task for the CMS server from a Gitlab/GitHub repo."
    echo ""
    echo -e "  --full-log\t\t\tPrint full log of git pull and tps gen"
    echo ""
    echo -e "  --nogen\t\t\tDo not generate testcases while updating. Note that the testcases should have been generated already."
    echo ""
    echo -e "  --appendtd <dataset-name>\tAppend dataset to a task"
    echo ""
    echo -e "  --help\t\t\tPrint help messages"
    echo ""
    echo -e "  --list-prob\t\t\tList all problems in the repo"
    exit 0
}

if [[ $# -lt 1 ]]; then
    help_func
fi

if [[ ${task} == "--help" ]]; then
    help_func
fi

if [[ ${task} == "--list-prob" ]]; then
    dir=`ls -F ${root_dir}/${repo_dir} | grep '/$' | sed 's/\/$//'`

    if [[ -z ${dir} ]]; then
        >&2 echo "No problems found"
        exit 0
    fi

    for d in ${dir}; do
        if is_problem ${d}; then
            echo ${d}
        fi
    done
    exit 0
fi

shift 1

while [[ $# -gt 0 ]]; do
    case $1 in
        --nogen)
            nogen=1
            ;;
        --help)
            help_func
            ;;
        --full-log)
            full=1
            ;;
        --appendtd)
            appendtd=1
            shift 1
            if [[ $# -eq 0 ]]; then
                echo "dataset-name is required"
                exit 0
            fi
            dataset_name=$1
            ;;
        *)
            echo "Unknown option/string $1"
            exit 0
            ;;
    esac
    shift 1
done

cd ${root_dir}/${repo_dir}
if [[ ${full} -eq 1 ]]; then
    git pull
else
    git pull 2>&1 > /dev/null
fi

if ! [[ -d "${task_path}" ]]; then
    echo "Can not find task ${task} in repo ${repo_dir}"
    exit 0
fi

cd "${task_path}"
if [[ ${nogen} -ne 1 ]]; then
    if [[ ${full} -eq 1 ]]; then
        tps gen -s
    else
        tps gen -s 2>&1 > /dev/null
    fi
    exit_code=$?
    if [[ ${exit_code} -ne 0 ]]; then
        echo "tps gen error"
        exit 0
    fi
fi
if ! [[ -d "${task_path}/tests" ]]; then
    echo "no testcases available"
    exit 0
fi

if [[ -f "public/files" && ${appendtd} -ne 1 ]]; then
    if [[ ${full} -eq 1 ]]; then
        tps make-public
    else
        tps make-public 2>&1 > /dev/null
    fi
    exit_code=$?
    if [[ ${exit_code} -ne 0 ]]; then
        echo "tps make-public error"
        exit 0
    fi
fi
cd ~

if [[ ${appendtd} -eq 1 ]];then
    echo "${dataset_name}" | cmsImportDataset -L tps_task "${task_path}"
    exit_code=$?
    if [[ ${exit_code} -ne 0 ]]; then
        echo "cmsImportDataset error"
    fi
    exit 0
fi

if [[ ${contest_id} -gt 0 ]]; then
    cmsImportTask -L tps_task "${task_path}" -u -c ${contest_id}
else
    cmsImportTask -L tps_task "${task_path}" -u
fi
exit_code=$?
if [[ ${exit_code} -ne 0 ]]; then
    echo "cmsImportTask error"
    exit 0
fi
